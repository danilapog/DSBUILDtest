### This workflow setup instance then build and push images ###
name: 4testing multiarch-build

on:
  push:
    tags:
      - "v*"
      - "!v*-stable"

env: 
  COMPANY_NAME: "danilaworker"
  PRODUCT_NAME: "documentserver"
      
jobs:
  build:
    name: Build 
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.condition }}
    strategy:
      matrix:
        images: ["documentserver"]
        edition: ["", "-ee", "-de"]
        condition: [true]
    steps:
      - name: Get tag
        run: | 
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          
      - name: 
        run: |
          if [[ ${{ env.RELEASE_VERSION }}  == v99.99* ]]; then
          echo "Build unstable >> start next job >>"
          exit 0
        shell: bash 

      - name: Checkout code 
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
     
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get Tag Name
        id: tag_name
        run: |
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}

      - name: Build 4testing
        run: |
          DOCKER_TAG=$(echo ${{ steps.tag_name.outputs.SOURCE_TAG }} | sed 's/^.//' )
          PACKAGE_VERSION=$( echo $DOCKER_TAG | sed -E 's/(.*)\./\1-/' )
          PACKAGE_URL=${{ secrets.REPO_URL }}${{ matrix.edition }}_"$PACKAGE_VERSION"_amd64.deb
          STATUS=$(curl -s -o /dev/null -w "%{http_code}\n" "$PACKAGE_URL")
          if [[ "$STATUS" = "200" ]]; then
             echo "Have access to documentserver${{ matrix.edition }} amd64 arch >> check arm64 access"
          else 
             echo "FAILED: Have no access to documentserver${{ matrix.edition }} amd64 arch"
             exit 1
          fi
          PACKAGE_URL=${{ secrets.REPO_URL }}${{ matrix.edition }}_"$PACKAGE_VERSION"_arm64.deb
          STATUS=$(curl -s -o /dev/null -w "%{http_code}\n" "$PACKAGE_URL") 
          if [[ "$STATUS" = "200" ]]; then
             echo "Have access to documentserver${{ matrix.edition }} arm64 arch"
             echo "All architecture are available >> build is starting."
             if 
             sed -i "s|http://download.onlyoffice.com/install/documentserver/linux/\${COMPANY_NAME}-\${PRODUCT_NAME}\${PRODUCT_EDITION}|${{ secrets.REPO_URL }}${{ matrix.edition }}_$PACKAGE_VERSION|g" Dockerfile
             PRODUCT_EDITION=${{ matrix.edition }} \
                PRODUCT_NAME=${{ env.PRODUCT_NAME }} DOCKERFILE=Dockerfile \
                PREFIX_NAME=4testing- TAG=$DOCKER_TAG \
                docker buildx bake \
                -f docker-bake.hcl ${{ matrix.images }} \
                --push
             echo "DONE: Build success >> exit with 0"
             exit 0  
          else
             echo "FAILED: Have no access to some required architecture documentserver${{ matrix.edition }} >> Exit with 0."
             exit 1
          fi
        shell: bash
  build-unstable:
    name: Build unstable images
    if: startsWith(github.ref, 'refs/tags/v99.99.*')
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.condition }}
    strategy:
      matrix:
        images: ["documentserver"]
        edition: ["", "-ee", "-de"]
        condition: [true]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get Tag Name
        id: tag_name
        run: |
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}

      - name: Build 4testing
        run: |
          DOCKER_TAG=$(echo ${{ steps.tag_name.outputs.SOURCE_TAG }} | sed 's/^.//' )
          PACKAGE_VERSION=$( echo $DOCKER_TAG | sed -E 's/(.*)\./\1-/' )
          PACKAGE_URL=${{ secrets.UNSTABLE_REPO_URL }}${{ matrix.edition }}_"$PACKAGE_VERSION"_amd64.deb
          STATUS=$(curl -s -o /dev/null -w "%{http_code}\n" "$PACKAGE_URL")
          if [[ "$STATUS" = "200" ]]; then
             echo "Have access to documentserver${{ matrix.edition }} amd64 arch >> check arm64 access"
             AMD64=present
          else 
             AMD64=""
          fi
          PACKAGE_URL=${{ secrets.REPO_URL }}${{ matrix.edition }}_"$PACKAGE_VERSION"_arm64.deb
          STATUS=$(curl -s -o /dev/null -w "%{http_code}\n" "$PACKAGE_URL")
          if [[ "$STATUS" = "200" ]]; then
             echo "Have access to documentserver${{ matrix.edition }} arm64 arch"
             ARM64=present
          else 
             echo "ARM64 does not present, build only AMD64 >> " 
             ARM64=""
          fi 
          if [[ $AMD64 == present ]] && [[ $ARM64 == present ]]; then 
          PLATFORMS="--set *.platform=linux/amd64,linux/arm64"
          fi
          if [[ $AMD64 == "" ]] && [[ $ARM64 == present ]]; then
          PLATFORMS="--set *.platform=linux/arm64"
          fi
          if [[ $AMD64 == present ]] && [[ $ARM64 == "" ]]; then 
          PLATFORMS="--set *.platform=linux/amd64"
          fi
          fi [[ $AMD64 == "" ]] && [[ $ARM64 == "" ]]; then
          echo "Build will not started requested architectures does not present" 
          exit 1 
          fi
          sed -i "s|http://download.onlyoffice.com/install/documentserver/linux/\${COMPANY_NAME}-\${PRODUCT_NAME}\${PRODUCT_EDITION}|${{ secrets.UNSTABLE_REPO_URL }}${{ matrix.edition }}_$PACKAGE_VERSION|g" Dockerfile
            PRODUCT_EDITION=${{ matrix.edition }} \
            PRODUCT_NAME=${{ env.PRODUCT_NAME }} DOCKERFILE=Dockerfile \
            PREFIX_NAME=4testing- TAG=$DOCKER_TAG \
            $PLATFORMS docker buildx bake \
              -f docker-bake.hcl ${{ matrix.images }} \
              --push
             echo "DONE: Build success >> exit with 0"
             exit 0
        shell: bash

